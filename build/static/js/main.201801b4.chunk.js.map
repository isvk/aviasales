{"version":3,"sources":["components/SearchPage/Logo/logo.svg","store/searchStatus.ts","store/typeSort.ts","models/search.ts","store/search/reducer.ts","store/search/types.ts","store/tickets/reducer.ts","store/tickets/types.ts","store/rootReducer.ts","store/search/actions.ts","store/search/saga.ts","store/tickets/actions.ts","store/tickets/saga.ts","store/rootSaga.ts","models/segment.ts","models/segments.ts","models/ticket.ts","services/index.ts","services/http.ts","services/api/apiSearch.ts","services/api/apiTickets.ts","services/api/apiTicketToModelTicket.ts","serviceWorker.ts","hooks/useCustomSelector.ts","store/rootSelector.ts","store/search/selectors.ts","components/Preload/Preload.tsx","components/Warning/Warning.tsx","hooks/useCustomDispatch.ts","components/LoadSearchId/LoadSearchId.tsx","components/LoadTickets/LoadTickets.tsx","components/SearchPage/Logo/Logo.tsx","components/SearchPage/ListFilters/ItemCheckbox/ItemCheckbox.tsx","components/SearchPage/ListFilters/FilterNumberStops/FilterNumberStops.tsx","components/SearchPage/ListFilters/ListFilters.tsx","components/SearchPage/ListSorts/ListSorts.tsx","components/SearchPage/ListTickets/Segment/Segment.tsx","components/SearchPage/ListTickets/Ticket/Ticket.tsx","components/SearchPage/ListTickets/ListTickets.tsx","components/SearchPage/SearchPage.tsx","App.tsx","index.tsx"],"names":["module","exports","searchStatus","typeSort","initialSearch","searchId","status","isNotLoadedSearchId","sort","price","filterNumberStops","Set","limit","Search","Record","reducer","state","action","type","set","id","isLoadedSearchId","value","List","tickets","forEach","item","push","createRootReducer","history","combineReducers","router","connectRouter","search","loadSearchIdSuccess","setStatus","loadSearchIdAsync","searchSaga","services","call","container","ApiSearch","loadSearchId","put","isErrorServer","console","error","takeEvery","loadTickets","loadTicketsAsync","ticketSaga","ApiTicket","response","stop","isLoadedTickets","initialSegment","origin","destination","date","stops","duration","Segment","initialSegments","from","to","Segments","initialTicket","carrier","segments","sortPrice","a","b","Ticket","bottle","Bottle","service","get","url","data","request","method","fetch","then","ok","json","http","map","ticket","apiTicketToModelTicket","Boolean","window","location","hostname","match","useCustomSelector","selector","useSelector","searchState","searchGetSearchId","createSelector","searchGetSearchStatus","searchGetSearchSort","searchGetSearchFilterNumberStops","ticketState","ticketStateSort","time","a_duration","b_duration","ticketStateFilterNumberStops","size","filters","filter","every","numberStopsTicket","has","ticketStateFilterAndSort","ticketStateFilterAndSortAndLimit","count","slice","ticketsGetTicketsFilterAndSortAndLimit","Preload","props","Wrapper","LoadIcon","text","styled","div","Loader5","Warning","WarningIcon","WarningStyledIcon","useCustomDispatch","useDispatch","LoadSearchId","dispatch","useEffect","LoadTickets","Logo","Shadow","Svg","src","logo","alt","img","SizeLogo","ItemCheckbox","Checkbox","onChange","e","handleChange","target","checked","Label","htmlFor","Check","input","label","IconCheck","FilterNumberStops","filterValues","handleChangeFilter","clear","add","Number","remove","setFilterNumberStops","Title","filterItems","key","ListFilters","ListSorts","sortValue","sortItems","Fragment","Radio","setSort","Route","FirstLine","segment","SecondLine","getTimeToString","Duration","getDurationToString","Stops","join","Math","floor","toString","dateStart","Date","dateEnd","getTime","toTimeString","Header","Price","getFormatPrice","Carrier","ListSegment","replace","ListTickets","index","SearchPage","Container","Body","LeftMenu","Content","App","exact","path","component","createBrowserHistory","basename","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","routerMiddleware","run","rootSaga","all","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.201801b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1bff4043.svg\";","export enum searchStatus {\r\n    isNotLoadedSearchId,\r\n    isLoadedSearchId,\r\n    isLoadedTickets,\r\n    isErrorServer\r\n}\r\n","export enum typeSort {\r\n    price,\r\n    time\r\n}\r\n","import { Record, Set } from \"immutable\";\nimport { searchStatus } from \"src/store/searchStatus\";\nimport { typeSort } from \"src/store/typeSort\";\n\nexport interface ISearch {\n    searchId: string;\n    status: searchStatus;\n    sort: typeSort;\n    filterNumberStops: Set<number>;\n    limit: number;\n}\n\nconst initialSearch: ISearch = {\n    searchId: \"\",\n    status: searchStatus.isNotLoadedSearchId,\n    sort: typeSort.price,\n    filterNumberStops: Set([]),\n    limit: 5\n};\n\nexport default class Search extends Record(initialSearch) {}\n","import * as types from \"./types\";\nimport * as actions from \"./actions\";\nimport { ActionTypesInfer } from \"src/store/actionTypes\";\nimport Search from \"src/models/search\";\nimport { searchStatus } from \"src/store/searchStatus\";\n\nexport type TStoreSearch = Search;\n\nconst reducer = (state: TStoreSearch = new Search(), action: ActionTypesInfer<typeof actions>) => {\n    switch (action.type) {\n        case types.LOAD_SEARCH_ID:\n            return state;\n\n        case types.LOAD_SEARCH_ID_SUCCESS:\n            return state.set(\"searchId\", action.id).set(\"status\", searchStatus.isLoadedSearchId);\n\n        case types.SET_STATUS:\n            return state.set(\"status\", action.status);\n\n        case types.SET_FILTER_NUMBER_STOPS:\n            return state.set(\"filterNumberStops\", action.value);\n\n        case types.SET_SORT:\n            return state.set(\"sort\", action.value);\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","export const LOAD_SEARCH_ID = \"LOAD_SEARCH_ID\";\nexport const LOAD_SEARCH_ID_SUCCESS = \"LOAD_SEARCH_ID_SUCCESS\";\nexport const SET_STATUS = \"SET_STATUS\";\nexport const SET_FILTER_NUMBER_STOPS = \"SET_FILTER_NUMBER_STOPS\";\nexport const SET_SORT = \"SET_SORT\";\n","import { List } from \"immutable\";\r\nimport { ActionTypesInfer } from \"src/store/actionTypes\";\r\nimport * as types from \"./types\";\r\nimport * as actions from \"./actions\";\r\nimport Ticket from \"src/models/ticket\";\r\n\r\nexport type TStoreTicket = List<Ticket>;\r\n\r\nconst reducer = (state: TStoreTicket = List([]), action: ActionTypesInfer<typeof actions>) => {\r\n    switch (action.type) {\r\n        case types.LOAD_TICKETS:\r\n            return state;\r\n\r\n        case types.ADD_TICKETS:\r\n            action.tickets.forEach((item: Ticket) => {\r\n                state = state.push(item);\r\n            });\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","export const LOAD_TICKETS = \"LOAD_TICKETS\";\r\nexport const ADD_TICKETS = \"ADD_TICKETS\";\r\n","import { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\nimport { History, LocationState } from \"history\";\nimport search, { TStoreSearch } from \"./search/reducer\";\nimport tickets, { TStoreTicket } from \"./tickets/reducer\";\n\nexport interface IStore {\n    router: typeof connectRouter;\n    search: TStoreSearch;\n    tickets: TStoreTicket;\n}\n\nconst createRootReducer = (history: History<LocationState>) =>\n    combineReducers({\n        router: connectRouter(history),\n        search,\n        tickets\n    });\n\nexport default createRootReducer;\n","import * as types from \"./types\";\nimport ISearch from \"src/models/search\";\n\nexport const loadSearchId = () =>\n    ({\n        type: types.LOAD_SEARCH_ID\n    } as const);\n\nexport const loadSearchIdSuccess = (id: string) =>\n    ({\n        type: types.LOAD_SEARCH_ID_SUCCESS,\n        id\n    } as const);\n\nexport const setStatus = (status: number) =>\n    ({\n        type: types.SET_STATUS,\n        status\n    } as const);\n\nexport const setFilterNumberStops = (value: ISearch[\"filterNumberStops\"]) =>\n    ({\n        type: types.SET_FILTER_NUMBER_STOPS,\n        value\n    } as const);\n\nexport const setSort = (value: number) =>\n    ({\n        type: types.SET_SORT,\n        value\n    } as const);\n","import { put, call, takeEvery } from \"@redux-saga/core/effects\";\nimport bottle from \"src/services/index\";\nimport * as types from \"./types\";\nimport { loadSearchIdSuccess, setStatus } from \"./actions\";\nimport { searchStatus } from \"../searchStatus\";\n\nfunction* loadSearchIdAsync(services: typeof bottle) {\n    try {\n        const id = yield call(services.container.ApiSearch.loadSearchId);\n        yield put(loadSearchIdSuccess(id));\n    } catch (e) {\n        yield put(setStatus(searchStatus.isErrorServer));\n        console.error(e);\n    }\n}\n\nexport default function* searchSaga(services: typeof bottle) {\n    yield takeEvery(types.LOAD_SEARCH_ID, loadSearchIdAsync, services);\n}\n","import * as types from \"./types\";\r\nimport Ticket from \"src/models/ticket\";\r\n\r\nexport const loadTickets = (searchId: string) =>\r\n    ({\r\n        type: types.LOAD_TICKETS,\r\n        searchId\r\n    } as const);\r\n\r\nexport const addTickets = (tickets: Ticket[]) =>\r\n    ({\r\n        type: types.ADD_TICKETS,\r\n        tickets\r\n    } as const);\r\n","import bottle from \"src/services\";\r\nimport { call, put, takeEvery } from \"@redux-saga/core/effects\";\r\nimport * as types from \"./types\";\r\nimport { addTickets, loadTickets } from \"./actions\";\r\nimport { setStatus } from \"src/store/search/actions\";\r\nimport { searchStatus } from \"src/store/searchStatus\";\r\n\r\nfunction* loadTicketsAsync(services: typeof bottle, action: ReturnType<typeof loadTickets>) {\r\n    try {\r\n        let response = yield call(services.container.ApiTicket.loadTickets, action.searchId);\r\n        yield put(addTickets(response.tickets));\r\n\r\n        if (response.stop) {\r\n            yield put(setStatus(searchStatus.isLoadedTickets));\r\n        } else {\r\n            yield put(loadTickets(action.searchId));\r\n        }\r\n    } catch (e) {\r\n        if (e.status === 500) {\r\n            yield put(loadTickets(action.searchId));\r\n        } else {\r\n            yield put(setStatus(searchStatus.isErrorServer));\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport default function* ticketSaga(services: typeof bottle) {\r\n    yield takeEvery(types.LOAD_TICKETS, loadTicketsAsync, services);\r\n}\r\n","import { all } from \"redux-saga/effects\";\nimport Bottle from \"bottlejs\";\nimport searchSaga from \"src/store/search/saga\";\nimport ticketSaga from \"src/store/tickets/saga\";\n\nexport default (services: Bottle) => {\n    return function* rootSaga() {\n        yield all([searchSaga(services), ticketSaga(services)]);\n    };\n};\n","import { List, Record } from \"immutable\";\n\nexport interface ISegment {\n    origin: string;\n    destination: string;\n    date: string;\n    stops: List<string>;\n    duration: number;\n}\n\nconst initialSegment: ISegment = {\n    origin: \"\",\n    destination: \"\",\n    date: \"\",\n    stops: List([]),\n    duration: 0\n};\n\nexport default class Segment extends Record(initialSegment) {}\n","import { Record } from \"immutable\";\nimport Segment from \"./segment\";\n\nexport interface ISegments {\n    from: Segment;\n    to: Segment;\n}\n\nconst initialSegments: ISegments = {\n    from: new Segment(),\n    to: new Segment()\n};\n\nexport default class Segments extends Record(initialSegments) {}\n","import { List, Record } from \"immutable\";\r\nimport Segments from \"./segments\";\r\nimport ISearch from \"./search\";\r\n\r\nexport interface ITicket {\r\n    price: number;\r\n    carrier: string;\r\n    segments: Segments;\r\n}\r\n\r\nconst initialTicket: ITicket = {\r\n    price: 0,\r\n    carrier: \"\",\r\n    segments: new Segments()\r\n};\r\n\r\nexport const sortTime = (tickets: Readonly<List<Ticket>>) => {\r\n    return tickets.sort((a: Ticket, b: Ticket) => {\r\n        let a_duration = a.segments.from.duration + a.segments.to.duration;\r\n        let b_duration = b.segments.from.duration + b.segments.to.duration;\r\n        if (a_duration < b_duration) return -1;\r\n        if (a_duration > b_duration) return 1;\r\n        return 0;\r\n    });\r\n};\r\n\r\nexport const sortPrice = (tickets: Readonly<List<Ticket>>) => {\r\n    return tickets.sort((a: Ticket, b: Ticket) => {\r\n        if (a.price < b.price) return -1;\r\n        if (a.price > b.price) return 1;\r\n        return 0;\r\n    });\r\n};\r\n\r\nexport const filterNumberStops = (tickets: Readonly<List<Ticket>>, filters: ISearch[\"filterNumberStops\"]) => {\r\n    return tickets.filter((ticket: Ticket) =>\r\n        [ticket.segments.from.stops.size, ticket.segments.to.stops.size].every(numberStopsTicket =>\r\n            filters.has(numberStopsTicket)\r\n        )\r\n    );\r\n};\r\n\r\nexport const limit = (tickets: Readonly<List<Ticket>>, count: number) => {\r\n    return tickets.slice(0, count);\r\n};\r\n\r\nexport default class Ticket extends Record(initialTicket) implements ITicket {}\r\n","import Bottle from \"bottlejs\";\nimport Http from \"./http\";\nimport ApiSearch from \"./api/apiSearch\";\nimport ApiTicket from \"./api/apiTickets\";\n\nlet bottle = new Bottle();\n\nexport default bottle;\nbottle.service(\"Http\", Http);\nbottle.service(\"ApiSearch\", ApiSearch, \"Http\");\nbottle.service(\"ApiTicket\", ApiTicket, \"Http\");\n\ndeclare module \"bottlejs\" {\n    interface IContainer {\n        ApiSearch: ApiSearch;\n        ApiTicket: ApiTicket;\n    }\n}\n","import { IHttp } from \"./IHttp\";\n\nexport default class Http implements IHttp {\n    get = (url: string, data: object) => {\n        return this.request(\"GET\", url, data);\n    };\n\n    request = (method: string, url: string, data = {}) => {\n        return fetch(\"https://front-test.beta.aviasales.ru/\" + url, {\n            method\n        }).then(response => {\n            if (response.ok) {\n                return response.json();\n            } else {\n                throw response;\n            }\n        });\n    };\n}\n","import { IHttp } from \"../IHttp\";\n\nexport interface IApiSearch {\n    searchId: string;\n}\n\nexport default class ApiSearch {\n    constructor(private http: IHttp) {}\n    private url: string = \"search\";\n\n    loadSearchId = () => this.http.get(this.url).then((response: IApiSearch) => response.searchId);\n}\n","import { IHttp } from \"../IHttp\";\nimport { IApiTickets } from \"./typings/apiTickets\";\nimport { apiTicketToModelTicket } from \"./apiTicketToModelTicket\";\n\nexport default class ApiTicket {\n    constructor(private http: IHttp) {}\n    private url: string = \"tickets\";\n\n    loadTickets = (searchId: string) => {\n        return this.http.get(this.url + \"?searchId=\" + searchId).then((response: IApiTickets) => {\n            return {\n                tickets: response.tickets.map(ticket => apiTicketToModelTicket(ticket)),\n                stop: response.stop\n            };\n        });\n    };\n}\n","import { List } from \"immutable\";\r\nimport Ticket from \"src/models/ticket\";\r\nimport Segments from \"src/models/segments\";\r\nimport Segment from \"src/models/segment\";\r\nimport { IApiTicket } from \"./typings/apiTicket\";\r\n\r\nexport const apiTicketToModelTicket = (ticket: IApiTicket) => {\r\n    return new Ticket({\r\n        ...ticket,\r\n        segments: new Segments({\r\n            from: new Segment({\r\n                ...ticket.segments[0],\r\n                stops: List(ticket.segments[0].stops)\r\n            }),\r\n            to: new Segment({\r\n                ...ticket.segments[1],\r\n                stops: List(ticket.segments[1].stops)\r\n            })\r\n        })\r\n    });\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { useSelector } from \"react-redux\";\r\nimport { IStore } from \"src/store/rootReducer\";\r\nimport * as rootSelector from \"src/store/rootSelector\";\r\n\r\ntype InferSelectorFunctionsTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\n\r\ntype InferredTypes = InferSelectorFunctionsTypes<typeof rootSelector>;\r\n\r\nexport default function useCustomSelector<T extends InferredTypes>(selector: T) {\r\n    return useSelector((state: IStore) => selector(state) as ReturnType<T>);\r\n}\r\n","import { createSelector } from \"reselect\";\r\nimport { IStore } from \"src/store/rootReducer\";\r\nimport { getSearchId, getStatus, getSort, getFilterNumberStops } from \"src/store/search/selectors\";\r\nimport { sortPrice, sortTime, filterNumberStops, limit } from \"src/models/ticket\";\r\nimport { typeSort } from \"./typeSort\";\r\n\r\nexport const searchState = (state: Readonly<IStore>) => state.search;\r\nexport const searchGetSearchId = createSelector(searchState, getSearchId);\r\nexport const searchGetSearchStatus = createSelector(searchState, getStatus);\r\nexport const searchGetSearchSort = createSelector(searchState, getSort);\r\nexport const searchGetSearchFilterNumberStops = createSelector(searchState, getFilterNumberStops);\r\n\r\nexport const ticketState = (state: Readonly<IStore>) => state.tickets;\r\nexport const ticketStateSort = (state: Readonly<IStore>) => {\r\n    switch (state.search.sort) {\r\n        case typeSort.time:\r\n            return { ...state, tickets: sortTime(state.tickets) };\r\n        case typeSort.price:\r\n            return { ...state, tickets: sortPrice(state.tickets) };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport const ticketsGetTicketsSort = createSelector(ticketStateSort, ticketState);\r\nexport const ticketStateFilterNumberStops = (state: Readonly<IStore>) => {\r\n    if (state.search.filterNumberStops.size === 0) return state;\r\n    return { ...state, tickets: filterNumberStops(state.tickets, state.search.filterNumberStops) };\r\n};\r\n\r\nexport const ticketStateLimit = (state: Readonly<IStore>) => {\r\n    if (state.search.limit === 0) return state;\r\n    return { ...state, tickets: limit(state.tickets, state.search.limit) };\r\n};\r\n\r\nexport const ticketsGetTicketsFilter = createSelector(ticketStateFilterNumberStops, ticketState);\r\nexport const ticketStateFilterAndSort = createSelector(ticketStateFilterNumberStops, ticketStateSort);\r\nexport const ticketsGetTicketsFilterAndSort = createSelector(ticketStateFilterAndSort, ticketState);\r\nexport const ticketStateFilterAndSortAndLimit = createSelector(ticketStateFilterAndSort, ticketStateLimit);\r\nexport const ticketsGetTicketsFilterAndSortAndLimit = createSelector(ticketStateFilterAndSortAndLimit, ticketState);\r\n","import { TStoreSearch } from \"./reducer\";\r\n\r\nexport const getSearchId = (state: TStoreSearch) => state.searchId;\r\nexport const getStatus = (state: TStoreSearch) => state.status;\r\nexport const getSort = (state: TStoreSearch) => state.sort;\r\nexport const getFilterNumberStops = (state: TStoreSearch) => state.filterNumberStops;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Loader5 } from \"@styled-icons/remix-fill/Loader5\";\r\n\r\ninterface IPreloadProps {\r\n    text: string;\r\n}\r\n\r\nexport default function Preload(props: IPreloadProps) {\r\n    return (\r\n        <Wrapper>\r\n            <LoadIcon size=\"28\" /> {props.text}\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 20px 0;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n    line-height: 28px;\r\n    color: #4a4a4a;\r\n`;\r\n\r\nconst LoadIcon = styled(Loader5)`\r\n    animation: rotate 2s linear infinite;\r\n    color: #2196f3;\r\n\r\n    @keyframes rotate {\r\n        100% {\r\n            transform: rotate(360deg);\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { Warning as WarningStyledIcon } from \"@styled-icons/entypo/Warning\";\r\n\r\ninterface IWarningProps {\r\n    text: string;\r\n}\r\n\r\nexport default function Warning(props: IWarningProps) {\r\n    return (\r\n        <Wrapper>\r\n            <WarningIcon size=\"28\" /> {props.text}\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 20px 0;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n    line-height: 28px;\r\n    color: #4a4a4a;\r\n`;\r\n\r\nconst WarningIcon = styled(WarningStyledIcon)`\r\n    color: red;\r\n`;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { allActionsTypes } from \"src/store/actionTypes\";\r\n\r\nexport default function useCustomDispatch() {\r\n    return useDispatch<Dispatch<allActionsTypes>>();\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport { loadSearchId } from \"src/store/search/actions\";\r\n\r\nexport default function LoadSearchId() {\r\n    const dispatch = useCustomDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(loadSearchId());\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return <></>;\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport { searchGetSearchId } from \"src/store/rootSelector\";\r\nimport { loadTickets } from \"src/store/tickets/actions\";\r\n\r\nexport default function LoadTickets() {\r\n    const dispatch = useCustomDispatch();\r\n    const searchId = useCustomSelector(searchGetSearchId);\r\n\r\n    useEffect(() => {\r\n        dispatch(loadTickets(searchId));\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return <></>;\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport logo from \"./logo.svg\";\r\n\r\nexport default function Logo() {\r\n    return (\r\n        <Shadow>\r\n            <Svg src={logo} alt=\"logo\" />\r\n        </Shadow>\r\n    );\r\n}\r\n\r\nconst SizeLogo = 60;\r\n\r\nconst Svg = styled.img`\r\n    display: block;\r\n    width: ${SizeLogo}px;\r\n    height: ${SizeLogo}px;\r\n    border-radius: ${SizeLogo / 2}px;\r\n    background-color: #2196f3;\r\n`;\r\n\r\nconst Shadow = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-end;\r\n    position: relative;\r\n    width: ${SizeLogo}px;\r\n    height: ${SizeLogo}px;\r\n    border-radius: ${SizeLogo / 2}px;\r\n    box-shadow: 0 1px 11px rgba(55, 104, 142, 0.3);\r\n\r\n    &:after {\r\n        content: \"\";\r\n        position: absolute;\r\n        z-index: -1;\r\n        width: 44px;\r\n        height: 44px;\r\n        border-radius: 22px;\r\n        box-shadow: 0 8px 11px rgba(55, 104, 142, 0.25);\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Check as IconCheck } from \"@styled-icons/boxicons-regular/Check\";\r\n\r\ninterface IItemCheckboxProps {\r\n    value: string | number;\r\n    handleChange: (value: string, checked: boolean) => void;\r\n    checked: boolean;\r\n    id: string;\r\n    text: string;\r\n}\r\n\r\nexport default function ItemCheckbox(props: IItemCheckboxProps) {\r\n    return (\r\n        <>\r\n            <Checkbox\r\n                type=\"checkbox\"\r\n                value={props.value}\r\n                onChange={e => props.handleChange(e.target.value, e.target.checked)}\r\n                checked={props.checked}\r\n                id={props.id}\r\n            />\r\n            <Label htmlFor={props.id}>\r\n                <Check size=\"18\" />\r\n                {props.text}\r\n            </Label>\r\n        </>\r\n    );\r\n}\r\n\r\nconst Checkbox = styled.input`\r\n    border: 0;\r\n    clip: rect(0 0 0 0);\r\n    height: 1px;\r\n    margin: -1px;\r\n    overflow: hidden;\r\n    padding: 0;\r\n    position: absolute;\r\n    width: 1px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n    position: relative;\r\n    display: flex;\r\n    width: 100%;\r\n    padding: 10px 20px;\r\n    font-size: 13px;\r\n    line-height: 20px;\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n        background: #f1fcff;\r\n    }\r\n\r\n    &:before {\r\n        content: \"\";\r\n        height: 20px;\r\n        width: 20px;\r\n        margin-right: 10px;\r\n        border: 1px solid #9abbce;\r\n        border-radius: 2px;\r\n    }\r\n\r\n    ${Checkbox}:checked + &:before {\r\n        border: 1px solid #2196f3;\r\n    }\r\n`;\r\n\r\nconst Check = styled(IconCheck)`\r\n    color: #2196f3;\r\n    height: 0;\r\n    width: 18px;\r\n    position: absolute;\r\n    left: 21px;\r\n    top: 10px;\r\n\r\n    ${Checkbox}:checked + ${Label} > & {\r\n        height: 18px;\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport { setFilterNumberStops } from \"src/store/search/actions\";\r\nimport { searchGetSearchFilterNumberStops } from \"src/store/rootSelector\";\r\nimport ItemCheckbox from \"../ItemCheckbox/ItemCheckbox\";\r\n\r\nexport default function FilterNumberStops() {\r\n    const dispatch = useCustomDispatch();\r\n    let filterValues = useCustomSelector(searchGetSearchFilterNumberStops);\r\n\r\n    const handleChangeFilter = (value: string, checked: boolean) => {\r\n        if (value === \"reset\") {\r\n            filterValues = filterValues.clear();\r\n        } else {\r\n            if (checked) filterValues = filterValues.add(Number(value));\r\n            else filterValues = filterValues.remove(Number(value));\r\n        }\r\n        dispatch(setFilterNumberStops(filterValues));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Title>Количество пересадок</Title>\r\n            {filterItems.map(item => (\r\n                <ItemCheckbox\r\n                    value={item.value}\r\n                    text={item.label}\r\n                    checked={typeof item.value === \"number\" ? filterValues.has(item.value) : filterValues.size === 0}\r\n                    handleChange={handleChangeFilter}\r\n                    id={\"filterNumberStops-\" + item.value}\r\n                    key={item.value}\r\n                />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n\r\nconst filterItems = [\r\n    { value: \"reset\", label: \"Все\" },\r\n    { value: 0, label: \"Без пересадок\" },\r\n    { value: 1, label: \"1 пересадка\" },\r\n    { value: 2, label: \"2 пересадки\" },\r\n    { value: 3, label: \"3 пересадки\" }\r\n];\r\n\r\nconst Title = styled.div`\r\n    padding: 10px 20px;\r\n    font-weight: 600;\r\n    font-size: 12px;\r\n    line-height: 12px;\r\n    letter-spacing: 0.5px;\r\n    text-transform: uppercase;\r\n    color: #4a4a4a;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport FilterNumberStops from \"./FilterNumberStops/FilterNumberStops\";\r\n\r\nexport default function ListFilters() {\r\n    return (\r\n        <Wrapper>\r\n            <FilterNumberStops />\r\n        </Wrapper>\r\n    );\r\n}\r\nconst Wrapper = styled.div`\r\n    padding: 10px 0;\r\n    background: #ffffff;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n    border-radius: 5px;\r\n`;\r\n","import React from \"react\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport { searchGetSearchSort } from \"src/store/rootSelector\";\r\nimport { typeSort } from \"src/store/typeSort\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport { setSort } from \"src/store/search/actions\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function ListSorts() {\r\n    const dispatch = useCustomDispatch();\r\n    let sortValue = useCustomSelector(searchGetSearchSort);\r\n\r\n    const handleChange = (value: string) => {\r\n        dispatch(setSort(Number(value)));\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            {sortItems.map(sort => (\r\n                <React.Fragment key={sort.value}>\r\n                    <Radio\r\n                        value={sort.value}\r\n                        type=\"radio\"\r\n                        checked={sort.value === sortValue}\r\n                        onChange={e => handleChange(e.target.value)}\r\n                        id={\"sort-\" + sort.value}\r\n                    />\r\n                    <Label htmlFor={\"sort-\" + sort.value}>{sort.label}</Label>\r\n                </React.Fragment>\r\n            ))}\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nconst sortItems = [\r\n    { value: typeSort.price, label: \"Самый дешевый\" },\r\n    { value: typeSort.time, label: \"Самый быстрый\" }\r\n];\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    height: 50px;\r\n`;\r\n\r\nconst Radio = styled.input`\r\n    border: 0;\r\n    clip: rect(0 0 0 0);\r\n    height: 1px;\r\n    margin: -1px;\r\n    overflow: hidden;\r\n    padding: 0;\r\n    position: absolute;\r\n    width: 1px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n    display: flex;\r\n    flex-grow: 1;\r\n    margin: 0;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: #ffffff;\r\n    border: 1px solid #dfe5ec;\r\n    font-style: normal;\r\n    font-weight: 600;\r\n    font-size: 12px;\r\n    line-height: 20px;\r\n    color: #4a4a4a;\r\n    letter-spacing: 0.5px;\r\n    text-transform: uppercase;\r\n\r\n    ${Radio}:checked + & {\r\n        background-color: #2196f3;\r\n        border: 1px solid #2196f3;\r\n        color: #ffffff;\r\n    }\r\n\r\n    &:nth-child(2) {\r\n        border-top-left-radius: 5px;\r\n        border-bottom-left-radius: 5px;\r\n    }\r\n\r\n    &:last-child {\r\n        border-top-right-radius: 5px;\r\n        border-bottom-right-radius: 5px;\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SegmentModel from \"src/models/segment\";\r\n\r\ninterface ISegmentProps {\r\n    segment: SegmentModel;\r\n}\r\n\r\nexport default function Segment(props: ISegmentProps) {\r\n    return (\r\n        <Wrapper>\r\n            <Route>\r\n                <FirstLine>\r\n                    {props.segment.origin} - {props.segment.destination}\r\n                </FirstLine>\r\n                <SecondLine>{getTimeToString(props.segment.date, props.segment.duration)}</SecondLine>\r\n            </Route>\r\n            <Duration>\r\n                <FirstLine>В пути</FirstLine>\r\n                <SecondLine>{getDurationToString(props.segment.duration)}</SecondLine>\r\n            </Duration>\r\n            <Stops>\r\n                <FirstLine>\r\n                    {props.segment.stops.size === 0\r\n                        ? \"без пересадок\"\r\n                        : props.segment.stops.size === 1\r\n                        ? \"1 пересадка\"\r\n                        : props.segment.stops.size + \" пересадки\"}\r\n                </FirstLine>\r\n                <SecondLine>{props.segment.stops.join(\", \")}</SecondLine>\r\n            </Stops>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nconst getDurationToString = (duration: number) => {\r\n    return Math.floor(duration / 60).toString() + \"ч \" + (duration % 60) + \"м\";\r\n};\r\n\r\nconst getTimeToString = (date: string, duration: number) => {\r\n    let dateStart = new Date(date);\r\n    let dateEnd = new Date(dateStart.getTime() + duration * 60 * 1000);\r\n    return dateStart.toTimeString().slice(0, 5) + \" - \" + dateEnd.toTimeString().slice(0, 5);\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    &:not(:first-child) {\r\n        padding-top: 10px;\r\n    }\r\n`;\r\n\r\nconst Route = styled.div`\r\n    width: 140px;\r\n`;\r\n\r\nconst Duration = styled.div`\r\n    width: 140px;\r\n`;\r\n\r\nconst Stops = styled.div`\r\n    width: 140px;\r\n`;\r\n\r\nconst FirstLine = styled.div`\r\n    font-weight: 600;\r\n    font-size: 12px;\r\n    line-height: 18px;\r\n    color: #a0b0b9;\r\n    letter-spacing: 0.5px;\r\n    text-transform: uppercase;\r\n`;\r\n\r\nconst SecondLine = styled.div`\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    line-height: 21px;\r\n    color: #4a4a4a;\r\n    letter-spacing: 0.5px;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TicketModel from \"src/models/ticket\";\r\nimport Segment from \"../Segment/Segment\";\r\n\r\ninterface ITicketProps {\r\n    ticket: TicketModel;\r\n}\r\n\r\nexport default function Ticket(props: ITicketProps) {\r\n    return (\r\n        <Wrapper>\r\n            <Header>\r\n                <Price>{getFormatPrice(props.ticket.price)} Р</Price>\r\n                <Carrier>\r\n                    <img src={\"//pics.avs.io/110/36/\" + props.ticket.carrier + \".png\"} alt={props.ticket.carrier} />\r\n                </Carrier>\r\n            </Header>\r\n            <ListSegment>\r\n                {<Segment segment={props.ticket.segments.from} />}\r\n                {<Segment segment={props.ticket.segments.to} />}\r\n            </ListSegment>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nconst getFormatPrice = (price: number) => {\r\n    return price.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1 \");\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 20px 0;\r\n    padding: 20px;\r\n    background: #ffffff;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding-right: 30px;\r\n    padding-bottom: 20px;\r\n`;\r\n\r\nconst ListSegment = styled.div``;\r\n\r\nconst Price = styled.div`\r\n    font-weight: 600;\r\n    font-size: 24px;\r\n    line-height: 24px;\r\n    color: #2196f3;\r\n`;\r\n\r\nconst Carrier = styled.div`\r\n    width: 110px;\r\n    height: 36px;\r\n`;\r\n","import React from \"react\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport { ticketsGetTicketsFilterAndSortAndLimit } from \"src/store/rootSelector\";\r\nimport Ticket from \"./Ticket/Ticket\";\r\n\r\nexport default function ListTickets() {\r\n    let tickets = useCustomSelector(ticketsGetTicketsFilterAndSortAndLimit);\r\n\r\n    return (\r\n        <>\r\n            {tickets.map((ticket, index) => (\r\n                <Ticket ticket={ticket} key={index} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport { searchGetSearchStatus } from \"src/store/rootSelector\";\r\nimport { searchStatus } from \"src/store/searchStatus\";\r\nimport Preload from \"../Preload/Preload\";\r\nimport Warning from \"../Warning/Warning\";\r\nimport LoadSearchId from \"../LoadSearchId/LoadSearchId\";\r\nimport LoadTickets from \"../LoadTickets/LoadTickets\";\r\nimport Logo from \"./Logo/Logo\";\r\nimport ListFilters from \"./ListFilters/ListFilters\";\r\nimport ListSorts from \"./ListSorts/ListSorts\";\r\nimport ListTickets from \"./ListTickets/ListTickets\";\r\n\r\nexport default function SearchPage() {\r\n    const status = useCustomSelector(searchGetSearchStatus);\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Container>\r\n                <Header>\r\n                    <Logo />\r\n                </Header>\r\n                <Body>\r\n                    <LeftMenu>\r\n                        <ListFilters />\r\n                    </LeftMenu>\r\n                    <Content>\r\n                        <ListSorts />\r\n                        {status === searchStatus.isNotLoadedSearchId && <LoadSearchId />}\r\n                        {status === searchStatus.isLoadedSearchId && <LoadTickets />}\r\n                        {status !== searchStatus.isLoadedTickets && status !== searchStatus.isErrorServer && (\r\n                            <Preload text=\"Загрузка...\" />\r\n                        )}\r\n                        {status === searchStatus.isLoadedTickets && <ListTickets />}\r\n                        {status === searchStatus.isErrorServer && <Warning text=\"Ошибка сервера\" />}\r\n                    </Content>\r\n                </Body>\r\n            </Container>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Container = styled.div`\r\n    width: 754px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    padding: 50px 0;\r\n`;\r\n\r\nconst Body = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n`;\r\n\r\nconst LeftMenu = styled.div`\r\n    width: 232px;\r\n    min-width: 232px;\r\n    margin-right: 20px;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    width: 100%;\r\n`;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport SearchPage from \"./components/SearchPage/SearchPage\";\n\nconst App: React.FC = () => {\n    return (\n        <Switch>\n            <Route exact path=\"/\" component={SearchPage} />\n        </Switch>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { createBrowserHistory } from \"history\";\nimport { routerMiddleware, ConnectedRouter } from \"connected-react-router\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./store/rootReducer\";\nimport rootSaga from \"./store/rootSaga\";\nimport services from \"./services\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nimport \"reset-css\";\nimport \"./index.css\";\n\nexport const history = createBrowserHistory({ basename: \"/aviasales/build/\" });\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    rootReducer(history),\n    composeEnhancers(applyMiddleware(sagaMiddleware, routerMiddleware(history)))\n);\nsagaMiddleware.run(rootSaga(services));\n\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedRouter history={history}>\n            <App />\n        </ConnectedRouter>\n    </Provider>,\n    document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}